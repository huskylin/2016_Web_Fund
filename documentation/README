1.1 Install Django and Start project
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

django official documentation: https://www.djangoproject.com/
django git repo: https://github.com/django/django

Install django:

        $ pip3 install django

Start project:

        $ django-admin startproject my_app

Project structure:

        my_app
        ├── manage.py
        └── my_app
            ├── __init__.py
            ├── settings.py
            ├── urls.py
            └── wsgi.py


1.2 Create Index Page
~~~~~~~~~~~~~~~~~~~~~~~

Now we want to create a index page. First you have to create templates directory.

	$ python3 manage.py startapp main_pages
        $ mkdir main_pages/templetes
	$ touch main_pages/templetes/index.html
        $ mkdir -p static/{images,scripts,sytlesheets}

        my_app
        ├── manage.py
        ├── my_app
        │   ├── __init__.py
        │   ├── settings.py
        │   ├── urls.py
        │   └── wsgi.py
	├── main_pages
	│   ├── __init__.py
	│   ├── admin.py
	│   ├── apps.py
	│   ├── views.py
	│   ├── models.py
	│   ├── tests.py
	│   ├── migrations
	│   │   └── __init__.py
	│   └── templates
	│       └── index.html
        └── static
            ├── images
            ├── scripts
            └── stylesheets
                └── index.css
In myapp/settings.py, set static DIRS:

        STATICFILES_DIRS = [
            os.path.join(BASE_DIR, "static"),
        ]

And set Installed applications:

	INSTALLED_APPS = (
		# 'other_app',
		'main_pages',
	)

In main_pages/views.py:

        from django.shortcuts import render_to_response

        def index(request):
                return render_to_response('index.html', locals())

in myapp/urls.py urlpatters add:

	from main_pages import index

        url(r'^$', index),
        url(r'^index/$', index);

Start server:

        $ python3 manage.py runserver 0.0.0.0:8080


1.3 basic Render method
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In html file you see:

	{{ food.name }}

Is maybe is:

	food.name  =>  food['name']  # food is a dictionary
	food.name  =>  food.name     # food is a class, name is property
	food.name  =>  food.name()   # food is a class, name is method
and:
	foo.0      =>  foo[0]       # foo is a list

Loop through a list:

	{% for food in foods %}
		{{ forloop.counter }}
		{{ food.name }}
	{% empty %}
		<p>If foods in empty, show this text</p>
	{% endfor %}

Loop reverse:

	{% for food in foods reversed %}

Counter:
	forloop.counter       # count from 1
	forloop.counter()     # count from 0
	forloop.revcounter    # reversed count to 1
	forloop.revcounter()  # reversed count to 0
	forloop.first	      # True or False
	forloop.last          # True or False
	forloop.parentloop    # parant loop variable

Condition:
	{% if food.is_spicy %}
	  <p>Ahhhh! This one spicy!!</p>
	{% else %}
	  <p>This food is so godd!!</p>
	{% endif %}


1.4 Models and migrations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Create a new application:

	$ python3 manage.py startapp login_system
	$ mkdir login_system/templates

Write your models:

	from django.db import models

	class User(models.Model):
	    username = models.CharField(max_length=50)
	    age      = models.DecimalField(max_digits=100, decimal_places=0)

	    def __str__(self):
		return self.username

	    class Meta:
		ordering = ['age', 'username']

	class Post:
	    user    = models.ForeingKey(User)
	    content = models.CharField(max_length=100)
	    date    = models.DateField(auto_now_add=True)

	    def __str__(self):
		"""Show class name"""
		return self.content

	    class Meta:
		"""Default order."""
		ordering = ['content']

Check is models have error or problem:
	$ python3 manage.py check

Migration:
	$ python3 manage.py makemigrations login_system

See sql language:
	$ python3 manage.py sqlmigration login_system 0001

Apply migration:
	$ python3 manage.py migrate

Shell:
	$ python3 manage.py shell

Import your models:

	>>> from login_system.models import User, Post

Create users:

	>>> User.objects.create(username='yoga', age=20, is_handsome=True)
	>>> User.objects.create(username='husky', age=99, is_handsome=True)

Query:

	>>> User.objects.all()
	[<User: yoga>, <User: husky>]

	>>> User.objects.get(id=1)
	<User: yoga>

	>>> User.objects.filter(username__contains='y', age=20)
	[<User: yoga>]

	>>> User.objects.order_by('age')
	[<User: yoga>, <User: husky>]

Combine all together:

	>>> yoga = User.objects.order_by('age').filter(username__contains='yog').get()
	<User: yoga>

	>>> Post.objects.create(user=yoga, content="I'm so handsome!")
	>>> p = Post.objects.get(id=1)
	[<Post: I'm so handsome!>]

Update:

	>>> User.objects.filter(name=yoga).update(is_handsome=False)

Delete:

	# method1
	>>> User.objects.filter(name=husky).delete()

	# method2
	>>> husky = User.objects.filter(name=husky).get()
	>>> husky.delete()


From Post get User:

	>>> p.user.username
	'yoga'

From User get Post:

	>>> yoga.post_set.all()
	[<Post: I'm so handsome!>]

post_set work like "objects", they have same method.

1.5 Admin
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


$ python3 manage.py createsuperuser

urls.py

	urlpatterns = patterns('',
	    url(r'^admin/', include(admin.site.urls)),
	    url(r'^menu/$', menu),
	)

login_system/admin.py

	from django.contrib import admin
	from login_system.models import User, Post

	class UserAdmin(admin.Models):
		list_display  = ('username', 'age', 'date')
		list_filter   = ('is_handsome',)
		search_fields = ('username',)
		fielfs        = ('username', 'age', 'is_handsome')
		ordering      = ('-age', 'date')

	admin.site.register(User, UserAdmin)


1.6 Nice Artical
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- http://dokelung-blog.logdown.com/archives
- http://djangobook.py3k.cn/
- https://github.com/uranusjr/django-tutorial-for-programmers
