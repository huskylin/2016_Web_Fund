1.1 Install Django and Start project
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

django official documentation: https://www.djangoproject.com/
django git repo: https://github.com/django/django

Install django:

        $ pip3 install django

Start project:

        $ django-admin startproject my_app

Project structure:

        my_app
        ├── manage.py
        └── my_app
            ├── __init__.py
            ├── settings.py
            ├── urls.py
            └── wsgi.py


1.2 Create Index Page
~~~~~~~~~~~~~~~~~~~~~~~

Now we want to create a index page. First you have to create templates directory.

        $ mkdir templetes
        $ mkdir -p static/{images,scripts,sytlesheets}

        my_app
        ├── manage.py
        ├── my_app
        │   ├── __init__.py
        │   ├── settings.py
        │   ├── urls.py
        │   ├── views.py
        │   └── wsgi.py
        ├── manage.py
        ├── static
        │   ├── images
        │   ├── scripts
        │   └── stylesheets
        │       └── index.css
        └── templates
            └── index.html

in settings.py find TEMPLATES and set DIRS:

        'DIRS': [os.path.join(BASE_DIR, 'templates')],

Set static DIRS:

        STATICFILES_DIRS = [
            os.path.join(BASE_DIR, "static"),
        ]

create views.py:

        from django.shortcuts import render_to_response

        def index(request):
                return render_to_response('index.html', locals())

in urls.py urlpatters add:

        url(r'^$', index),
        url(r'^index/$', index);

Start server:

        $ python3 manage.py runserver 0.0.0.0:8080


1.3 basic Render method
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In html file you see:

	{{ food.name }}

Is maybe is:

	food.name  =>  food['name']  # food is a dictionary
	food.name  =>  food.name     # food is a class, name is property
	food.name  =>  food.name()   # food is a class, name is method
and:
	foo.0      =>  foo[0]       # foo is a list

Loop through a list:

	{% for food in foods %}
		{{ forloop.counter }}
		{{ food.name }}
	{% empty %}
		<p>If foods in empty, show this text</p>
	{% endfor %}

Loop reverse:

	{% for food in foods reversed %}

Counter:
	forloop.counter       # count from 1
	forloop.counter()     # count from 0
	forloop.revcounter    # reversed count to 1
	forloop.revcounter()  # reversed count to 0
	forloop.first	      # True or False
	forloop.last          # True or False
	forloop.parentloop    # parant loop variable

Condition:
	{% if food.is_spicy %}
	  <p>Ahhhh! This one spicy!!</p>
	{% else %}
	  <p>This food is so godd!!</p>
	{% endif %}


1.4 Nice Artical
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- http://dokelung-blog.logdown.com/archives
- http://djangobook.py3k.cn/
- https://github.com/uranusjr/django-tutorial-for-programmers
